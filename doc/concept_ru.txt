sandboxer - концепция проекта

Основные положения
==================

1. sandboxer позволяет детально контролировать выполнение процесса или группы
процессов в userspace путём перехвата и обработки системных вызовов.
2. На текущий момент поддерживается поддерживается и может поддерживаться
только платформа [GNU/]Linux.
3. Отличие sandboxer от ptrace - нативного механизма ядра Linux для обработки
системных вызовов - быстродействие, достигающееся за счёт обработки большей
части системных вызовов в kernel space без остановки процесса. 
[в используемом в текущем концепте механизме перехвата системных вызовов через
kprobes имеет место быть ускорение по сравнению с ptrace в десятки раз.
Подробнее - см. issue #8 на github.]
4. sandboxer выпускается и тестируется на актульных версиях ядра и не требует изменения
его кода. Но он может требовать включения некоторых опций в конфигурации ядра (При этом
подразумевается, что данные опции включены на стандартных сборках дистрибутивов).
5. Основной частью проекта является модуль к ядру Linux. Кроме того,
предоставлены userspace-утилиты как образец использования модуля или
предполагаемый вариант использования.
6. Сигнал к началу сандбоксинга подаётся процессом, который требуется
контролировать.
7. Ментором (контролирующим процессом) является родитель сандбоксируемого
процесса. Все потомки изначально сандбоксируемого процесса объединяются в один
слот и контролируются изначальным ментором.
Один ментор может контролировать несколько слотов, но не наоборот (каждый слот относится
к конкретному ментору).
8. sandboxer не обрабатывает информацию о системных вызовах, совершённых
процессами, не входящими ни в один слот.
9. sandboxer не влияет на исполнение сандбоксируемых процессов никаким
образом, кроме их остановки.
Если сандбоксируемый процесс не соблюдает ограничения на память, время или безопасность,
то его слот убивается. Возможен также режим "мягкого" сандбоксинга, при котором вместо
этого просто возвращается соответсвующий код ошибки из системного вызова.
10. sandboxer не влияет никаким образом на исполнение процесса, являющегося
ментором какого-либо слота. Но он предоставляет возможность взаимодействия с
собой через файлы в /proc.
11. Если процесс, находящийся в сандбоксе, запрашивает создание нового слота, то он
создаётся. Таким образом, на процессы, находящиеся во внутреннем слоте, распространяются
ограничения из обоих слотов.

Основные понятия
================

sandboxer предоставляет интерфейс для контроля процесса-"ребёнка" (child),
находящегося в "песочнице" (sandbox) под присмотром "ментора" (mentor).

Песочница является лишь абстрактным объектом, испольуемым для обозначения
процесса сандбоксинга.

Потомки одного процесса, находящегося в песочнице, возникшие в процессе
сандбоксинга, объединяются в один "слот" (slot). Все системные вызовы всех
процессов в одном слоте в соответствии с интерфейсом, предоставляемым модулем,
контролируются одним ментором.

Обсуждение
==========
6. Предлагаю также прописать, что данный процесс не должен иметь детей.

